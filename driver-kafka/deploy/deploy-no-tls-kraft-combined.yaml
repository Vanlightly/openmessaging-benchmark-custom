#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
- name: Set server settings
  hosts: all
  tags: server
  tasks:
    - name: set SystemMaxUse
      lineinfile:
        dest: /etc/systemd/journald.conf
        regexp: ^SystemMaxUse=
        line: SystemMaxUse=1000M
    - name: disable ForwardToSyslog
      lineinfile:
        dest: /etc/systemd/journald.conf
        regexp: ^ForwardToSyslog=
        line: ForwardToSyslog=no
    - name: set vm.max_map_count
      sysctl:
        name: vm.max_map_count
        value: "262144"
        state: present
        reload: yes
    - name: Increase hard file descriptor limit
      pam_limits:
        domain: "*"
        limit_type: "hard"
        limit_item: nofile
        value: 500000
    - name: Increase soft file descriptor limit
      pam_limits:
        domain: "*"
        limit_type: "soft"
        limit_item: nofile
        value: 500000
    - name: Enable pam_limits.so
      lineinfile:
        path: /etc/pam.d/login
        insertafter: EOF
        line: "session required pam_limits.so"
    - name: Reboot the machine with all defaults
      reboot:

- name: Setup common OS packages
  hosts: all
  tags: server
  connection: ssh
  become: true
  roles:
  tasks:
    - name: Remove sysstat
      package:
        name:
          - sysstat
        state: absent
    - name: Install packages
      package:
        name:
          - xfsprogs
          - iotop
          - wget
          - sysstat
          - vim
          - chrony
          - git
          - gcc
          - tuned
        state: present
        update_cache: true
    - name: Install Java Redhat
      when: ansible_os_family == 'RedHat'
      package:
        name:
          - java-17
        state: present
    - name: Install Java on Debian
      when: ansible_os_family == 'Debian'
      package:
        name:
          - openjdk-17-jdk
        state: present

- name: Format and mount disks for Kafka hosts
  hosts: kafka
  tags: server
  connection: ssh
  become: true
  tasks:
    - command: >
        tuned-adm profile latency-performance
    - name: Get nvme device IDs
      set_fact:
        device_info: "{{ hostvars[inventory_hostname].ansible_devices }}"
        nvme_device_ids: "{{ hostvars[inventory_hostname].ansible_devices.keys() | map('regex_search', 'nvme[1-9].*') | select('string') | list }}"
    - name: Get nvme devices
      set_fact:
        nvme_devices: '{{ (nvme_devices | default([])) + ["/dev/" + item] }}'
      loop: "{{ nvme_device_ids }}"
    - name: Get mount points
      set_fact:
        mounts: '{{ (mounts | default([])) + [{ "path": "/mnt/data-" + ansible_loop.index|string, "src": "/dev/" + item}] }}'
      loop: "{{ nvme_device_ids }}"
      loop_control:
        extended: true
      when: device_info[item]["partitions"] | length == 0
    - name: Format disks
      filesystem:
        fstype: xfs
        dev: "{{ item }}"
      with_items: "{{ nvme_devices }}"
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items: "{{ mounts }}"

- name: Store server lists
  hosts: all
  connection: ssh
  tasks:
    - set_fact:
        bootstrapServers: "{{ groups['kafka'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9092') | join(',') }}"

- name: Kafka installation
  hosts: kafka
  tags: kafka
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/kafka state=absent
    - file: path=/opt/kafka state=directory
    - set_fact:
        bootstrapServers: "{{ groups['kafka'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9092') | join(',') }}"
        kafkaVersion: "{{ kafkaServerVersion }}"
    - debug:
        msg: "bootstrap servers: {{ bootstrapServers }}"

    #################### Release ####################
    - name: Download Kafka package
      unarchive:
        src: http://mirrors.ocf.berkeley.edu/apache/kafka/{{ kafkaVersion }}/kafka_2.13-{{ kafkaVersion }}.tgz
        remote_src: yes
        dest: /opt/kafka
        extra_opts: ["--strip-components=1"]

    - set_fact:
        privateIp: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    - name: Change locale to en_US.utf-8
      shell: |
        echo 'LANG=en_US.utf-8
              LC_ALL=en_US.utf-8' > /etc/environment
    - name: Setup JMX for Prometheus
      copy:
        src: "monitoring/jmx_exporter/jmx_prometheus_javaagent-0.13.0.jar"
        dest: "/opt/kafka/jmx_prometheus_javaagent-0.13.0.jar"
    - name: Configure JMX for Prometheus (Kafka)
      template:
        src: "monitoring/jmx_exporter/metrics.yml"
        dest: "/opt/kafka/metrics.yml"

# - name: Setup Controller
#   hosts: controller
#   tags: controller
#   connection: ssh
#   become: true
#   tasks:
#     - set_fact:
#         brokerId: "{{ groups['controller'].index(inventory_hostname) }}"
#         privateIp: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
#     # - shell:
#     #     cmd: "/opt/kafka/bin/kafka-storage.sh random-uuid"
#     #   run_once: true
#     #   register: storage_id
#     - name: Set up Controller
#       template:
#         src: "templates/controller.properties"
#         dest: "/opt/kafka/config/controller.properties"
#     - template:
#         src: "templates/controller.service"
#         dest: "/etc/systemd/system/controller.service"
#     - name: Initialise Storage
#       shell:
#         cmd: "/opt/kafka/bin/kafka-storage.sh format -t {{ kafkaClusterID }} -c /opt/kafka/config/controller.properties"
#       register: result
#       failed_when:
#         - result.rc != 0
#         - '"is already formatted" not in result.stderr'
#     - systemd:
#         state: restarted
#         daemon_reload: yes
#         name: "controller"

- name: Setup Kafka
  hosts: kafka
  tags: setup
  connection: ssh
  become: true
  tasks:
    - set_fact:
        brokerId: "{{ groups['kafka'].index(inventory_hostname)}}"
        privateIp: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    - name: Set up broker
      template:
        src: "templates/combined.properties"
        dest: "/opt/kafka/config/combined.properties"
    - template:
        src: "templates/combined.service"
        dest: "/etc/systemd/system/combined.service"
    - name: Initialise Storage
      shell:
        cmd: "/opt/kafka/bin/kafka-storage.sh format -t {{ kafkaClusterID }} -c /opt/kafka/config/combined.properties"
      register: result
      failed_when:
        - result.rc != 0
        - '"is already formatted" not in result.stderr'
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "combined"

- name: Chrony setup
  hosts: client
  tags: client
  connection: ssh
  become: true
  tasks:
    - name: Set up chronyd
      template:
        src: "templates/chrony.conf"
        dest: "/etc/chrony.conf"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "chronyd"

- name: Setup Benchmark client
  hosts: client
  tags: client
  connection: ssh
  become: true
  tasks:
    - set_fact:
        clientBootstrapServers: "{{ groups['kafka'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9092') | join(',') }}"
    - file: path=/opt/benchmark state=absent
    - name: Copy benchmark code
      unarchive:
        src: ../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
    - shell: mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark
    - shell: tuned-adm profile latency-performance
    - shell: chown -R ubuntu /opt/benchmark

    - name: Get list of driver config files
      raw: ls -1 /opt/benchmark/driver-kafka/*.yaml
      register: drivers_list

    - name: Configure URL
      lineinfile:
        dest: "{{ item }}"
        regexp: "^  bootstrap.servers="
        line: "  bootstrap.servers={{ clientBootstrapServers }}"
      with_items: "{{ drivers_list.stdout_lines }}"
    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark-worker
        regexp: "^JVM_MEM="
        line: 'JVM_MEM="-Xms{{ clientMinJvmHeap }} -Xmx{{ clientMinJvmHeap }} -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=32 -XX:ConcGCThreads=32 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -XX:-UseBiasedLocking"'
    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark
        regexp: "^JVM_MEM="
        line: 'JVM_MEM="-Xmx1G"'
    #    - name: Setup JMX for Producer/Consumer clients
    #      copy:
    #        src: "monitoring/jmx_exporter/jmx_prometheus_javaagent-0.13.0.jar"
    #        dest: "/opt/benchmark/jmx_prometheus_javaagent-0.13.0.jar"
    - name: Configure JMX for Prometheus (Client)
      template:
        src: "monitoring/jmx_exporter/client.yml"
        dest: "/opt/benchmark/metrics.yml"
    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
    - name: "Restart benchmark worker"
      tags:
        - configure
      systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"

- name: Hosts addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: "Kafka brokers {{ item }}"
      with_items: "{{ groups['kafka'] }}"
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['client'] }}"

# Setup the Prometheus/Grafana monitoring stack
- hosts: prometheus
  tags: monitoring
  roles:
    - cloudalchemy.prometheus
  vars:
    prometheus_db_dir: /monitoring/prometheus/data
    prometheus_scrape_configs:
      - job_name: "kafka"
        static_configs:
          - targets: "{{ groups['kafka'] | map('extract', hostvars, ['ansible_default_ipv4','address']) | map('regex_replace', '^(.*)$','\\1:8080') | list  }}"
      - job_name: "kafka-lag"
        static_configs:
          - targets: "{{ groups['prometheus'] | map('extract', hostvars, ['ansible_default_ipv4','address']) | map('regex_replace', '^(.*)$','\\1:8000') | list  }}"
      - job_name: "node"
        static_configs:
          - targets: "{{ groups['kafka'] | map('extract', hostvars, ['ansible_default_ipv4','address']) | map('regex_replace', '^(.*)$','\\1:9100') | list  }}"
          - targets: "{{ groups['client'] | map('extract', hostvars, ['ansible_default_ipv4','address']) | map('regex_replace', '^(.*)$','\\1:9100') | list  }}"
      - job_name: "client"
        static_configs:
          - targets: "{{ groups['client'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '^(.*)$', '\\1:9090') | list }}"

- hosts: prometheus
  tags: monitoring
  roles:
    - cloudalchemy.grafana
  vars:
    grafana_logs_dir: /monitoring/grafana/logs
    grafana_data_dir: /monitoring/grafana/data
    grafana_version: 9.5.6
    grafana_security:
      admin_user: admin
      admin_password: set_me_if_you_want
    grafana_datasources:
      - name: prometheus
        type: prometheus
        access: proxy
        url: "http://localhost:9090"
        basicAuth: false
    grafana_dashboards:
      - dashboard_id: 1860
        revision_id: 21
        datasource: prometheus

- name: Install Node exporter on Brokers to collect system metrics
  hosts: kafka, client
  tags: monitoring
  become: true
  tasks:
    - name: Add user node_exporter
      user:
        name: node_exporter
        shell: /bin/false
        system: true
        create_home: no

    - name: Download and extract
      unarchive:
        src: https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
        dest: /tmp
        remote_src: yes

    - name: Copy bin node_exporter to /usr/local/bin
      copy:
        src: /tmp/node_exporter-1.0.1.linux-amd64/node_exporter
        remote_src: yes
        dest: /usr/local/bin/
        owner: node_exporter
        group: node_exporter
        mode: u+x,g+x,o+x

    - name: Create service node_exporter.service
      blockinfile:
        path: /etc/systemd/system/node_exporter.service
        block: |
          [Unit]
          Description=Prometheus Node Exporter
          Wants=network-online.target
          After=network-online.target
          [Service]
          User=node_exporter
          Group=node_exporter
          Type=simple
          ExecStart=/usr/local/bin/node_exporter
          [Install]
          WantedBy=multi-user.target
        create: true

    - name: systemctl daemon_reload
      systemd:
        daemon_reload: yes

    - name: Start and Enable node_exporter
      service:
        name: node_exporter
        state: started
        enabled: yes

    - name: Check whether port 9100 is available
      wait_for:
        port: 9100
        state: started
        timeout: 5

- name: Install jattach and async-profiler
  hosts: all
  tags: profiling
  become: true
  tasks:
    - name: Download and extract async-profiler
      unarchive:
        src: https://github.com/jvm-profiling-tools/async-profiler/releases/download/v1.7.1/async-profiler-1.7.1-linux-x64.tar.gz
        dest: /tmp
        remote_src: yes

    - name: Download and install jattach
      get_url:
        url: https://github.com/apangin/jattach/releases/download/v1.5/jattach
        dest: /usr/bin/jattach
        mode: "0755"
